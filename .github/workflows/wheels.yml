name: Wheels

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false
  schedule:
    # run weekly on a Monday
    - cron: "0 0 * * 1"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

      - name: Build wheels for Linux
        uses: pypa/cibuildwheel@v2.16.2
        if: runner.os == 'Linux'
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"
        env:
          CIBW_SKIP: "pp* *i686*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MUSLLINUX_X86_64_IMAGE: musllinux_1_1
          CIBW_ARCHS_LINUX: auto64 aarch64
          CIBW_BEFORE_BUILD_LINUX: "{project}/ci/linux-deps"
          CIBW_TEST_COMMAND: "{project}/ci/test"
          CIBW_ENVIRONMENT: >-
            CYVCF2_HTSLIB_CONFIGURE_OPTIONS="--enable-libcurl --enable-s3 --enable-lzma --enable-bz2 --with-libdeflate"
            CYTHONIZE=1

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        if: ${{ always() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true' }}
        uses: mxschmitt/action-tmate@v3

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Build sdist
        run: CYTHONIZE=1 python setup.py sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
